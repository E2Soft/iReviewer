/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-06-30 at 20:06:09 UTC 
 * Modify at your own risk.
 */

package com.appspot.elevated_surge_702.sync;

/**
 * Service definition for Sync (v1).
 *
 * <p>
 * API to sync data from clients to server
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SyncRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Sync extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the sync library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://elevated-surge-702.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "sync/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Sync(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Sync(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Comment collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Comment.List request = sync.comment().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comment comment() {
    return new Comment();
  }

  /**
   * The "comment" collection of methods.
   */
  public class Comment {

    /**
     * metoda koja ce vratiti sve komentare koji su dodati/menjani nakon proteglov vremena od poslednje
     * sinhronizacije: Args: StringMessage (type): messages.Message vreme poslednje sinhronizacije u
     * %Y-%m-%dT%H:%M:%S formatu Returns: CommentMessageCollection (type): messages.Message Izlazna
     * poruka koja se salje klijentima
     *
     * Create a request for the method "comment.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesCommentMessageCollection> {

      private static final String REST_PATH = "synccomment";

      /**
       * metoda koja ce vratiti sve komentare koji su dodati/menjani nakon proteglov vremena od
       * poslednje sinhronizacije: Args: StringMessage (type): messages.Message vreme poslednje
       * sinhronizacije u %Y-%m-%dT%H:%M:%S formatu Returns: CommentMessageCollection (type):
       * messages.Message Izlazna poruka koja se salje klijentima
       *
       * Create a request for the method "comment.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesCommentMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Group collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Group.List request = sync.group().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Group group() {
    return new Group();
  }

  /**
   * The "group" collection of methods.
   */
  public class Group {

    /**
     * Create a request for the method "group.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesGroupMessageCollection> {

      private static final String REST_PATH = "syncgroup";

      /**
       * Create a request for the method "group.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesGroupMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Grouptoreview collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Grouptoreview.List request = sync.grouptoreview().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Grouptoreview grouptoreview() {
    return new Grouptoreview();
  }

  /**
   * The "grouptoreview" collection of methods.
   */
  public class Grouptoreview {

    /**
     * Create a request for the method "grouptoreview.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesGroupToReviewMessageCollection> {

      private static final String REST_PATH = "syncgrouptoreview";

      /**
       * Create a request for the method "grouptoreview.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesGroupToReviewMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Grouptouser collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Grouptouser.List request = sync.grouptouser().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Grouptouser grouptouser() {
    return new Grouptouser();
  }

  /**
   * The "grouptouser" collection of methods.
   */
  public class Grouptouser {

    /**
     * Create a request for the method "grouptouser.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesGroupToUserMessageCollection> {

      private static final String REST_PATH = "syncgrouptouser";

      /**
       * Create a request for the method "grouptouser.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesGroupToUserMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Image collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Image.List request = sync.image().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Image image() {
    return new Image();
  }

  /**
   * The "image" collection of methods.
   */
  public class Image {

    /**
     * Create a request for the method "image.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesImageMessageCollection> {

      private static final String REST_PATH = "syncimage";

      /**
       * Create a request for the method "image.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesImageMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Review collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Review.List request = sync.review().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Review review() {
    return new Review();
  }

  /**
   * The "review" collection of methods.
   */
  public class Review {

    /**
     * Create a request for the method "review.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesReviewMessageCollection> {

      private static final String REST_PATH = "syncreview";

      /**
       * Create a request for the method "review.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesReviewMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Revobject collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.Revobject.List request = sync.revobject().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Revobject revobject() {
    return new Revobject();
  }

  /**
   * The "revobject" collection of methods.
   */
  public class Revobject {

    /**
     * Create a request for the method "revobject.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesReviewObjectMessageCollection> {

      private static final String REST_PATH = "syncrevobject";

      /**
       * Create a request for the method "revobject.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesReviewObjectMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the User collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sync sync = new Sync(...);}
   *   {@code Sync.User.List request = sync.user().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public User user() {
    return new User();
  }

  /**
   * The "user" collection of methods.
   */
  public class User {

    /**
     * Create a request for the method "user.register".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Register#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.elevated_surge_702.crud.model.MessagesUserMessage}
     * @return the request
     */
    public Register register(com.appspot.elevated_surge_702.crud.model.MessagesUserMessage content) throws java.io.IOException {
      Register result = new Register(content);
      initialize(result);
      return result;
    }

    public class Register extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesStringMessage> {

      private static final String REST_PATH = "registeruser";

      /**
       * Create a request for the method "user.register".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Register#execute()} method to invoke the remote operation. <p>
       * {@link
       * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.elevated_surge_702.crud.model.MessagesUserMessage}
       * @since 1.13
       */
      protected Register(com.appspot.elevated_surge_702.crud.model.MessagesUserMessage content) {
        super(Sync.this, "POST", REST_PATH, content, com.appspot.elevated_surge_702.crud.model.MessagesStringMessage.class);
      }

      @Override
      public Register setAlt(java.lang.String alt) {
        return (Register) super.setAlt(alt);
      }

      @Override
      public Register setFields(java.lang.String fields) {
        return (Register) super.setFields(fields);
      }

      @Override
      public Register setKey(java.lang.String key) {
        return (Register) super.setKey(key);
      }

      @Override
      public Register setOauthToken(java.lang.String oauthToken) {
        return (Register) super.setOauthToken(oauthToken);
      }

      @Override
      public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Register) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Register setQuotaUser(java.lang.String quotaUser) {
        return (Register) super.setQuotaUser(quotaUser);
      }

      @Override
      public Register setUserIp(java.lang.String userIp) {
        return (Register) super.setUserIp(userIp);
      }

      @Override
      public Register set(String parameterName, Object value) {
        return (Register) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "user.syncdown".
     *
     * This request holds the parameters needed by the sync server.  After setting any optional
     * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public Syncdown syncdown() throws java.io.IOException {
      Syncdown result = new Syncdown();
      initialize(result);
      return result;
    }

    public class Syncdown extends SyncRequest<com.appspot.elevated_surge_702.crud.model.MessagesUserMessageCollection> {

      private static final String REST_PATH = "syncuser";

      /**
       * Create a request for the method "user.syncdown".
       *
       * This request holds the parameters needed by the the sync server.  After setting any optional
       * parameters, call the {@link Syncdown#execute()} method to invoke the remote operation. <p>
       * {@link
       * Syncdown#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected Syncdown() {
        super(Sync.this, "GET", REST_PATH, null, com.appspot.elevated_surge_702.crud.model.MessagesUserMessageCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Syncdown setAlt(java.lang.String alt) {
        return (Syncdown) super.setAlt(alt);
      }

      @Override
      public Syncdown setFields(java.lang.String fields) {
        return (Syncdown) super.setFields(fields);
      }

      @Override
      public Syncdown setKey(java.lang.String key) {
        return (Syncdown) super.setKey(key);
      }

      @Override
      public Syncdown setOauthToken(java.lang.String oauthToken) {
        return (Syncdown) super.setOauthToken(oauthToken);
      }

      @Override
      public Syncdown setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Syncdown) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Syncdown setQuotaUser(java.lang.String quotaUser) {
        return (Syncdown) super.setQuotaUser(quotaUser);
      }

      @Override
      public Syncdown setUserIp(java.lang.String userIp) {
        return (Syncdown) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String date;

      /**

       */
      public java.lang.String getDate() {
        return date;
      }

      public Syncdown setDate(java.lang.String date) {
        this.date = date;
        return this;
      }

      @Override
      public Syncdown set(String parameterName, Object value) {
        return (Syncdown) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Sync}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Sync}. */
    @Override
    public Sync build() {
      return new Sync(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SyncRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSyncRequestInitializer(
        SyncRequestInitializer syncRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(syncRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
